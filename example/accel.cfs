{block 120}
( - node) # 708 ( paths)
: line ( ncd) swap push swap | indent
     begin dup , over + -next drop drop ;
: count ( nc-ncd) dup [ 100 ] mod [ 0 ] + if | cr
( horz) swap drop [ 1 ] ; ( vert) ] then drop [ 100 ] / [ 100 ] ;
: to ( nn) over negate + -if | cr
( back) negate count negate line ; | cr
( forw) ] then count line ; | br

: 0pa align create [ 708 700 to 600 0 to | cr
1 17 to 117 717 to 716 708 to -1 , ]
: 1pa align create [ 708 108 to 109 117 to | cr
217 717 to 716 708 to -1 , ]
: 2pa align create [ 708 700 to 600 0 to | cr
1 17 to 117 101 to 201 217 to 317 717 to 716 708 to -1 , 

{block 148}
( f18 software simulator) empty compile | , ( demo bootstream) # 1242 ( load empty) | , ( prelude) 1250 load ( boot descriptors) 1236 load | , ( engine) 1252 8 loads ( opcodes) 1268 4 loads | , ( boot loader) 1238 load | , ( display) 1276 6 loads 1248 load 1288 2 loads | , ( preserve variables) :var nmem [0x18] :var n2mem [0x18]
: nm2m [ nod2 ] @ !node [ n2mem ] @ mem ! | , | ... [ nod ] @ !node [ nmem ] @ mem ! ; :var big [0x64]
: puka ( nn-a) nn-n 2* $8000 + block ;
: code ( nn nn) puka push puka pop 64 move ; | , ( keyboard) 1292 2 loads | , ( ports and pins) 1296 2 loads | , ( interactive) 1240 load | , | ,
: /softsim 0 [ time ] ! power | , [ first ] @ 1 + if drop nm2m ; ] then # 0 [ first ] ! | , 100 [ big ] ! 1 [ gap ] ! -1 [ wind? ] ! | , [ 100 ] !node [ 0 ] mem ! [ 100 ] other | , [ 0 ] !node [ 0 ] mem ! [ 0 ] node 0 [ xo ] ! 0 [ yo ] ! !vis ; | , | , ( init and testbeds) 902 load | , ( start) /softsim ok h


{block 200}
( user f18 code) reclaim 900 load | br

( softsim example reclaim) # 0 ( node) # 1342 ( load) | cr
( practical example pwm code reclaim) # 842 ( load)

{block 202}
( ga application tools)
: a-com [ 3 ] ; | *
: a-bps 921600 ;
: c-com [ 5 ] ; | *
: c-bps 921600 ;
: host 206 ; | *
: target 208 ; | , ( modules) | *
: sram [ 264 ] ; | , ( utils) | *
: streamer [ 282 ] ; | *
: loader [ 210 ] ; | , | ,
: selftest ( port) [ 708 ] load ; :var stp [0x3]
: autotest ( port) [ 712 ] load ;

{block 900}
( accelerometer test) target | cr
( SPI interface) | cr
8   node 6 fh load = $0
( serial tx) | cr
100 node 8 fh load = $0
( passthru nodes) | cr
101 node 12 fh load = $0 | cr
102 node 12 fh load = $0 | cr
103 node 12 fh load = $0 | cr
104 node 12 fh load = $0 | cr
105 node 12 fh load = $0 | cr
106 node 12 fh load = $0 | cr
107 node 12 fh load = $0 | cr
( tx test) | cr
108 node 14 fh load = $0

{block 902}
( - ide loader setup)
: /node ( n) dup +node /ram ; | cr
8   /node up /a io /b $2d08 $2e80 $3144 3 /stack $2b /p | cr
100 /node $20 /p | cr
101 /node left right 2 /stack $20 /p | cr
102 /node right left 2 /stack $20 /p | cr
103 /node left right 2 /stack $20 /p | cr
104 /node right left 2 /stack $20 /p | cr
105 /node left right 2 /stack $20 /p | cr
106 /node right left 2 /stack $20 /p | cr
107 /node left right 2 /stack $20 /p | cr
108 /node $16 /p 

{block 904}
( loader template) target load loader load | cr
( using default ide paths) | cr 
( kill boots) 0 708 hook 0 -hook | cr
( setup application) 902 load | cr
( visit all nodes) 2 ship panel | cr
( susp boot-) $0 $0 ( warm) $a9 /frame wos !frame


{block 906}
( -) # 8 ( SPI interface) | cr
0 org | cr
: cs = $0 $f
: wait = $0 !b $18 for unext ; ( approx 100ns for 5mhz scl) | cr
: -cs = $0 $e wait ;
: spiw1 = $0 if drop $10 then $2a or dup wait $4 or wait ;
: spiw = $0 ( b-) for over over and spiw1 2/ next drop drop ;
: spir1 = $0 @b $20 and if drop - 2* - ; ] then drop 2* ;
: spir = $0 ( -b) $a wait spir1 -cs ;
: spir8 = $0 dup dup or 7 for spir next ;
: spiwr = $0 ( bb-) -cs $8000 15 spiw cs ;
: init = $0 cs spiwr spiwr spiwr
: getxyz = $0 @ -cs $f2 $80 7 spiw 5 for spir8 next cs a push down a! ! ! ! ! ! ! pop a! getxyz ; = $0


{block 907}
( spi interface code) | cr
: cs ( sets cs and scl signals high, waits)
: wait ( waits)
: -cs ( sets cs low, scl high, waits)
: spiw1 ( writes one bit out spi interface, if input) | cr
( is zero, writes zero bit, otherwise writes one bit) | cr
( toggles clock high and low) 
: spiw ( writes multiple bits out spi interface) | cr
( takes three arguments on stack - value to write, word) | cr
( with single bit set indicating where to start) | cr
( writing from, and number of bits to write)
: spir1 ( samples spi input and sets lsb of value) | cr
( on stack appropriately, then performs left shift)
: spir ( reads one bit from spi input, toggles clock) | cr
: spir8 ( reads one byte from spi input)
: spiwr ( writes sixteen bits of word on top of stack) | cr
( over spi output)
: init ( writes three values to registers over spi) | cr
( interface, eight bit register number plus eight bit value) | cr
( packed into one eighteen bit word) | cr
( values initially stored on stack to save memory)
: getxyz ( main loop, reads six bytes from spi registers) | cr
( these are x y z accelerometer readings) | cr
( then writes them to down port)


{block 908}
( serial tx) | cr
$30 org | cr
: !bit ( im-i) = $0 over and | indent
     if $25555 !b drop ; ] then $35555 !b drop ;
: putchar ( di-dx) = $0 $ff or 2* .. | cr
( 1-start, 8-data, 1-stop bit) 9 for = $0 | indent
     1 !bit 2/ over for . unext next ; = $0 | br

= $0 $20 org ( programmed with abandon)
: start io b! ( space) $25555 !b right a! ( bit delay) 2350
: wait = $0 @ if - putchar drop wait ; ] then drop wait ; = $0

{block 910}
( serial tx tester) 0 org | cr
( spells out Tap! crlf)
$53 , $61 , $74 , $61 , $6e , $21 , $d , $a , | cr
$20 org | cr
: start left b! dup or a! | cr
7 for @+ !b next ;

{block 912}
( passthrough) 0 org | cr
$20 org | cr
( source and destination should be on stack) | cr
: start = $0 b! a!
: copy = $0 @ !b copy ; = $0

{block 914}
( accelerometer tap detection) 0 org | cr
( spells out Tap! crlf)
$54 , $61 , $70 , $21 , $d , $a , | cr
: abs = $0 ( n-n) -if - 1 + then ;
: getz = $0 ( -n) down b! | cr
@b 2* 2* 2* 2* 2* 2* 2* 2* @b or 2* 2* | cr
@b drop @b drop @b drop @b drop .
: thresh? = $0 ( n-n) abs $20f00 + ;
: tap = $0 dup dup or a! left b! | cr
5 for @+ !b next
: idle = $0 getz -if drop idle ; ] then drop
: count = $0 getz -if drop tap ; ] then drop count ; = $0

{block 915}
: abs ( returns absolute value of tos)
: getz ( returns accelerometer z axis value) | cr
( reads six bytes from spi interface node) | cr
( and combines first two into a single) | cr
( eighteen bit twos complement value)
: thresh? ( subtracts threshold constant from) | cr
( accelerometer output)
: tap ( writes a sequence of bytes to left port) | cr
( to spell out the ascii sequence tap which) | cr
( gets written to serial port output)
: idle ( main program loop, reads accelerometer) | cr
( output, if value is above threshold calls count)
: count ( keeps reading accelerometeter output until) | cr
( it drops below threshold, then calls tap to print message)


