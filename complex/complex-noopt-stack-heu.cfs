{block 200}
( user f18 code) reclaim 790 load | br
( softsim test) 1070 load

{block 202}
( ga application tools)
: a-com [ 10 ] ; | *
: a-bps 921600 ;
: c-com [ 3 ] ; | *
: c-bps 921600 ;
: host 206 ; | *
: target 208 ; | , 

( modules) | *
: sram [ 264 ] ; | *
: pf [ 360 ] ; | *
: ether [ 720 ] ; | , 

( utils) | *
: streamer [ 282 ] ; | *
: loader [ 210 ] ; | , | ,

: selftest ( port) [ 708 ] load ; :var stp [0x3]
: autotest ( port) [ 712 ] load ;

{block 216}
792 load 1072 load

{block 360}
( polyforth vm) reclaim | ,
( sram) sram load | ,
( serial) 38 fh 3 loads reclaim | ,
( stack) 106 node $39 org 278 load 14 fh 2 loads | ,
( coprocs) 22 fh 4 loads | ,
( bitsy) 105 node 18 fh 2 loads | ,
( coprocs) 30 fh 4 loads | ,
( flash to sram) 86 fh 2 loads reclaim | ,
( erase and burn flash) 288 load | ,
( spi speedup) 290 load | ,
( serial wires) 102 node $20 org | ,
: start @ !b start ; 1709 bin | ,
( ganglia) 44 fh load ( snorkel) 48 fh load | ,
( spi) 50 fh load

{block 362}
( - load descriptors)
: l, dup +node 100 /mod 1 and 2* swap 1 and + 1714 + 
  push 32 32 pop /part ( main) $a9 /p ;
: ganglia nns for i -1 + n-nn l, next ; | ,

( sea of mk1) ganglia | ,
( snorkel) 207 +node 1605 /ram up /b $37 /p | ,
( sram) sram 2 + load | ,
( vm) 2 fh load | ,
( serial) 4 fh load | ,
( additional i/o) 6 fh load | ,
( md5) 792 load | ,
( clock nodes) exit | ,
517 +node 517 /ram io /b $200 /p | ,
516 +node 516 /ram left dup /a /p right /b | ,

{block 790}
host target | cr
10 node 800 load
11 node 802 load
12 node 804 load
13 node 806 load
110 node 810 load
111 node 812 load
112 node 814 load
113 node 816 load
210 node 820 load
211 node 822 load
212 node 824 load
213 node 826 load
214 node 828 load
312 node 834 load
313 node 836 load
209 node 1060 load

{block 792}
: /node dup +node /ram ; | cr
10 /node $4 /p
11 /node $7 /p
12 /node $b /p
13 /node $e /p
110 /node $1e /p
111 /node $1d /p
112 /node $2a /p
113 /node $18 /p
210 /node left /p
211 /node $7 /p
212 /node $36 /p
213 /node $38 /p
214 /node $f /p
312 /node $21 /p
313 /node $20 /p
209 /node left /b right /a right /p

{block 800}
( -) # 10 ( id 0 mem 0) 0 org | cr
| br
: cosine = $0 down b! @b right b! !b = $0 ; | cr
: main = $0 cosine main = $0 ; | cr

{block 802}
( -) # 11 ( id 1 mem 2) 0 org | cr
0 , 0 , | br
: cosine = $0 right b! @b down b! @b . + = $0 ; | cr
: main = $0 0 cosine push drop pop dup down b! !b dup over a! 0 17 | cr
  for | cr
    +* unext push drop pop a 1 b! !b left b! !b 1 b! @b left b! !b main = $0 ; | cr

{block 804}
( -) # 12 ( id 2 mem 0) 0 org | cr
| br
: 1if = $0 | cr
  .. -if drop dup right b! !b ; ] then drop 65536 over - 1 . + . + down b! !b = $0 ; | cr
: main = $0 0 left b! @b push drop pop left b! @b right b! !b dup 2* 2* right b! @b 16 | cr
  .. if -1 . + | cr
    for | cr
      2/ unext dup then drop 3 and . + push drop pop right b! @b 1if main = $0 ; | cr

{block 806}
( -) # 13 ( id 3 mem 0) 0 org | cr
| br
: 1rep = $0 - 1 . + . + down b! !b = $0 ; | cr
: 1if = $0 | cr
  .. -if drop 65536 over 1rep 65535 right b! @b 1rep ; ] then drop = $0 ; | cr
: main = $0 0 right b! @b push drop pop dup right b! !b dup 65535 and push drop pop 0 over - 1 . + . + dup right b! !b dup down b! !b 1if main = $0 ; | cr

{block 810}
( -) # 110 ( id 5 mem 5) 0 org | cr
0 , -281 , 5203 , -42329 , 37407 , | br
: cosine = $0 0 right b! @b 0 b! !b 0 push drop pop | cr
  1 a! 3 for | cr
    dup 0 b! @b a push *. push drop pop pop a! @+ . + push drop pop next dup right b! @b *. push drop pop down b! !b drop = $0 ; | cr
: main = $0 cosine main = $0 ; | cr

{block 812}
( -) # 111 ( id 6 mem 0) 0 org | cr
| br
: 2rep = $0 dup left b! !b left b! @b = $0 ; | cr
: 1if = $0 | cr
  .. -if drop dup 65536 . + push drop pop ; ] then drop 65536 over - 1 . + . + push drop pop = $0 ; | cr
: cosine = $0 2rep push drop pop dup 1if dup left b! !b 2rep right b! !b dup right b! !b dup down b! !b drop = $0 ; | cr
: main = $0 up b! @b cosine down b! @b up b! !b main = $0 ; | cr

{block 814}
( -) # 112 ( id 7 mem 0) 0 org | cr
| br
: 1if = $0 | cr
  .. -if drop right b! @b push drop pop ; ] then drop 0 push drop pop down b! @b right b! !b = $0 ; | cr
: cosine = $0 left b! @b right b! !b right b! @b left b! !b left b! @b left b! @b *. push drop pop left b! !b = $0 ; | cr
: sqrt = $0 | cr
  15 for | cr
    up b! @b 2 | cr
    .. if -1 . + | cr
      for | cr
        2* unext dup then drop up b! !b next = $0 ; | cr
: main = $0 0 cosine right b! @b 1if dup up b! !b sqrt main = $0 ; | cr

{block 816}
( -) # 113 ( id 8 mem 0) 0 org | cr
| br
: 1if = $0 | cr
  .. -if drop down b! @b right b! !b down b! @b push drop pop ; ] then drop right b! @b push drop pop = $0 ; | cr
: cosine = $0 right b! @b 2 | cr
  .. if -1 . + | cr
    for | cr
      2* unext dup then drop right b! !b = $0 ; | cr
: main = $0 0 cosine down b! @b dup right b! !b 1if dup up b! !b main = $0 ; | cr

{block 820}
( -) # 210 ( id 10 mem 0) 0 org | cr
0 , $30000 , $8000 , $4000 , $2000 , $1000 , $800 , $400 , 
$2629 , $446 , $7006 , $5475 , $5272 , $4639 , $986 , $4871 , | cr
: /start = $0 
  dup dup or a!
  15 for 
    @+ right b! !b right b! @b right b! @b next left b! !b = $0 ; | cr

{block 822}
( -) # 211 ( id 11 mem 1) 0 org | cr
0 , | br
: 1if = $0 | cr
  .. -if drop dup - 1 . + push drop pop ; ] then drop = $0 ; | cr
: main = $0 0 right b! @b 0 b! !b 0 b! @b up b! !b up b! @b right b! !b left b! @b push drop pop 0 b! @b 1if dup right b! !b main = $0 ; | cr

{block 824}
( -) # 212 ( id 12 mem 1) 0 org | cr
0 , | br
: 5rep = $0 dup dup or b! !b @b = $0 ; | cr
: 4rep = $0 b! !b dup down b! !b = $0 ; | cr
: 3rep = $0 b! @b - 1 . + . + dup right 4rep = $0 ; | cr
: 1if = $0 | cr
  .. -if drop ; ] then drop dup right b! !b = $0 ; | cr
: 2if = $0 | cr
  .. if drop ; ] then drop right b! @b 1if = $0 ; | cr
: 3if = $0 | cr
  .. -if drop dup right b! !b ; ] then drop right b! @b dup dup or 3rep 2if = $0 ; | cr
: sqrt = $0 dup dup or | cr
  15 for | cr
    right b! @b push drop pop dup down 4rep down b! @b 5rep up b! !b up b! @b right b! @b . + 5rep right 3rep 3if next drop = $0 ; | cr
: main = $0 up b! @b right b! !b sqrt right b! @b left b! !b main = $0 ; | cr

{block 826}
( -) # 213 ( id 13 mem 2) 0 org | cr
0 , 0 , | br
: 6rep = $0 1 b! @b right b! !b right b! @b = $0 ; | cr
: 1if = $0 | cr
  .. -if drop ; ] then drop right b! @b push drop pop = $0 ; | cr
: 2if = $0 | cr
  .. if drop ; ] then drop 0 b! @b down b! @b - 1 . + . + dup right b! !b 1if = $0 ; | cr
: 3if = $0 | cr
  .. -if drop right b! @b push drop pop ; ] then drop 6rep 2if = $0 ; | cr
: sqrt = $0 0 a! !+ !+ 0 0 push drop pop | cr
  15 for | cr
    dup left b! !b left b! @b right b! !b down b! @b right b! !b 6rep 3if next dup push drop pop = $0 ; | cr
: main = $0 up b! @b right b! @b sqrt right b! !b main = $0 ; | cr

{block 828}
( -) # 214 ( id 14 mem 0) 0 org | cr
| br
: sqrt = $0 0 32768 push drop pop | cr
  15 for | cr
    left b! @b over over - and . + left b! !b dup 2/ push drop pop next drop = $0 ; | cr
: main = $0 sqrt main = $0 ; | cr

{block 834}
( -) # 312 ( id 17 mem 2) 0 org | cr
0 , 0 , | br
: 7rep = $0 down b! @b dup right b! !b = $0 ; | cr
: 1if = $0 | cr
  .. -if drop ; ] then drop 7rep drop = $0 ; | cr
: sqrt = $0 | cr
  15 for | cr
    down b! @b down b! @b a! 0 17 | cr
    for | cr
      +* unext push drop pop a 1 b! !b down b! !b 1 b! @b right b! !b 7rep 1if next = $0 ; | cr
: main = $0 sqrt main = $0 ; | cr

{block 836}
( -) # 313 ( id 18 mem 0) 0 org | cr
| br
: 1if = $0 | cr
  .. if drop ; ] then drop dup down b! !b = $0 ; | cr
: 2if = $0 | cr
  .. -if drop ; ] then drop right b! @b 1if = $0 ; | cr
: sqrt = $0 0 | cr
  15 for | cr
    right b! @b push drop pop dup 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 3 and down b! !b dup 65535 and push drop pop right b! @b 2if next drop = $0 ; | cr
: main = $0 sqrt main = $0 ; | cr

{block 1060}
( snorkel interface 209 )
0 org | cr
: start 3 for @p !b [ .. /start .. ] @b next ! ;

{block 1070}
( softsim  ) 208 node 0 org | cr
: main = $0 right b! @p [ .. start .. ] !b @b warm = $0 ;

{block 1072}
( softsim test config) | cr
208 +node 208 /ram $0 /p

